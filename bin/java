#!/usr/bin/env bash

LATEST_JDK_VERSION="1.8"

if [ ${STACK:-""} = "cedar" ]; then
  DEFAULT_JDK_VERSION="1.6"
  JDK_URL_1_8=${JDK_URL_1_8:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.8.0_20.tar.gz"}
  JDK_URL_1_7=${JDK_URL_1_7:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.7.0_55.tar.gz"}
  JDK_URL_1_6=${JDK_URL_1_6:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.6.0_27.tar.gz"}
else
  DEFAULT_JDK_VERSION="1.8"
  JDK_URL_1_9=${JDK_URL_1_9:-"http://lang-jvm.s3.amazonaws.com/jdk/cedar-14/openjdk1.9-latest.tar.gz"}
  JDK_URL_1_8=${JDK_URL_1_8:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.8.0_51-cedar14.tar.gz"}
  JDK_URL_1_7=${JDK_URL_1_7:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.7.0_79-cedar14.tar.gz"}
  JDK_URL_1_6=${JDK_URL_1_6:-"http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.6.0_27.tar.gz"}
fi

JDK_URL_1_6_DARWIN="http://heroku-jvm-langpack-java.s3.amazonaws.com/openjdk6-u33-heroku-temaki-darwin.tar.gz"
JDK_URL_1_7_DARWIN="http://heroku-jvm-langpack-java.s3.amazonaws.com/openjdk7-u4-heroku-temaki-darwin.tar.gz"

java_version() {
  base=$1
  echo $(${base}java -version 2>&1 | head -n 1 | cut -d '"' -f 2)
}

install_java() {
  
  build_dir=$1
  cache_dir=$2
  jdk_url=${3:-"http://download.oracle.com/otn-pub/java/jdk/7u80-b15/jdk-7u80-linux-x64.tar.gz"}
  jdk_ver=${4:-"1.7.0_80"}
	    
  if [ ! -d "${cache_dir}" ]; then error "Invalid cache directory to store JDK."; fi
  if [ ! -d "${build_dir}" ]; then error "Invalid slug directory to install JDK."; fi
	        
  mkdir -p "${build_dir}/.jdk"
		  
  if [ ! -f "${cache_dir}/.jdk/bin/java" ] || [ "${jdk_ver}" != "$(java_version ${cache_dir}/.jdk/bin/)" ] ; then
    echo -n " (downloading...)"
    rm -rf "${cache_dir}/.jdk" && mkdir -p "${cache_dir}/.jdk"
    curl -s -j -k -L -H "Cookie: oraclelicense=accept-securebackup-cookie" "${jdk_url}" | tar xz -C "${cache_dir}/.jdk" --strip-components=1
    rm -rf "${cache_dir}/.jdk/src.zip" "${cache_dir}/.jdk/javafx-src.zip" "${cache_dir}/.jdk/db" "${cache_dir}/.jdk/man"
  fi
  cp -r "${cache_dir}/.jdk/." "${build_dir}/.jdk"
					        
  if [ ! -f "${build_dir}/.jdk/bin/java" ]; then
    error "Unable to retrieve JDK."
  fi
							        
  export JAVA_HOME="${build_dir}/.jdk"
  export PATH="${build_dir}/.jdk/bin:${PATH}"
								    
  _install_tools ${baseDir}
  _create_profile_script ${baseDir}
  _create_export_script ${JAVA_HOME} "$(pwd)"
}

jdk_overlay() {
  baseDir=$1
  shopt -s dotglob
  if [ -d ${baseDir}/.jdk ] && [ -d ${baseDir}/.jdk-overlay ]; then
    cp -r ${baseDir}/.jdk-overlay/* ${baseDir}/.jdk/
  fi
}

is_java_version_change() {
  jdkDir=$1
  javaVersion=${2:-${DEFAULT_JDK_VERSION}}
  if [ ! -d "${jdkDir}" ]; then echo "Invalid JDK directory."; return 1; fi
  test -f "${jdkDir}/version" && [ "$(cat ${jdkDir}/version)" != "${javaVersion}" ]
}

_get_jdk_download_url() {
  jdkVersion=${1:-${DEFAULT_JDK_VERSION}}
  # hacky way of parsing the variable name.
  # bash 4 would solve this with associative arrays, but shunit
  # tests don't seem to respect the correct bash version.
  minorJdkVersion=\$JDK_URL_1_$(expr "${jdkVersion}" : '1.\([6-9]\)')
  osSuffix="$(_get_os_suffix)"
  jdkUrl=$(eval echo \$JDK_URL_1_${minorJdkVersion}${osSuffix})
  echo "${jdkUrl}"
}

_get_relative_jdk_bin() {
  echo "$(_get_relative_jdk_home)/bin"
}

_get_relative_jdk_home() {
  if [ "$(_get_os_suffix)" = "_DARWIN" ]; then
    echo "Home"
  else
    echo ""
  fi
}

_get_os_suffix() {
  osSuffix=""
  if [ "$(uname)" = "Darwin" ]; then osSuffix="_DARWIN"; fi
  echo "${osSuffix}"
}

is_supported_java_version() {
  javaVersion=$1
  if [ "$(expr "${javaVersion}" : '1.[6-9]')" != 0 ]; then
    echo "true"
  else
    echo "false"
  fi
}

get_default_java_version() {
  if [ ${STACK:-""} = "cedar" ]; then
    echo "1.6"
  else
    echo "$DEFAULT_JDK_VERSION"
  fi
}

detect_java_version() {
  baseDir=${1:-"No Dir"}
  if [ "${baseDir}" = "No Dir" ] || [ ! -d "${baseDir}" ] ; then
    error_return "Invalid directory specified for pom file."
    return 1
  fi
  if [ -f ${baseDir}/system.properties ]; then
    echo "$(get_app_system_value ${baseDir}/system.properties "java.runtime.version")"
  else
    echo "$(get_default_java_version)"
  fi
}

get_jvm_utils_command() {
  baseDir=${1:-"No Dir"}
  if [ "${baseDir}" = "No Dir" ] || [ ! -d "${baseDir}" ] ; then
    error_return "Invalid directory specified for pom file."
    return 1
  fi

  jvmUtilsDir="${baseDir}"/.jvm-utils
  mkdir -p "${jvmUtilsDir}"

  if [ ! -f "$jvmUtilsDir"/jvm-utils.jar ] ; then
    jvmUtilsURL="https://s3.amazonaws.com/heroku-jvm-langpack-java/buildpack-jvm-utils-0.1.jar"
    curl --silent --location ${jvmUtilsURL} --output "${jvmUtilsDir}"/jvm-utils.jar
  fi

  echo "${jvmUtilsDir}"/jvm-utils.jar
}

get_app_system_value() {
  local file=${1?"No file specified"}
  local key=${2?"No key specified"}

  # escape for regex
  local escaped_key=$(echo $key | sed "s/\./\\\./g")

  [ -f $file ] && \
  grep -E ^$escaped_key[[:space:]=]+ $file | \
  sed -E -e "s/$escaped_key([\ \t]*=[\ \t]*|[\ \t]+)([A-Za-z0-9\.-]*).*/\2/g"
}

_create_profile_script() {
  local profileScript="${1}/.profile.d/jvmcommon.sh"
  local javaVersion="${2:-DEFAULT_JDK_VERSION}"

  mkdir -p $(dirname $profileScript)
  cat << EOF > $profileScript
export JAVA_HOME="\$HOME/.jdk"
export PATH="\$HOME/.heroku/bin:\$JAVA_HOME/bin:\$PATH"
limit=\$(ulimit -u)
case \$limit in
256)   # 1X Dyno
  default_java_opts="-Xmx384m -Xss512k"
  ;;
512)   # 2X Dyno
  default_java_opts="-Xmx768m"
  ;;
16384) # IX Dyno
  default_java_opts="-Xmx2g"
  ;;
32768) # PX Dyno
  default_java_opts="-Xmx4g"
  ;;
*)
  default_java_opts="-Xmx384m -Xss512k"
  ;;
esac

export JAVA_TOOL_OPTIONS=\${JAVA_TOOL_OPTIONS:-"\${default_java_opts} -Dfile.encoding=UTF-8"}

if [[ "${JAVA_OPTS}" == *-Xmx* ]]; then
  export JAVA_OPTS="\$JAVA_OPTS"
else
  export JAVA_OPTS="\${default_java_opts} \$JAVA_OPTS"
fi
EOF
}

_install_tools() {
  local ctxDir=${1:-BUILD_DIR}
  local curDir=${JVM_COMMON_DIR:-$(cd $(dirname ${BASH_SOURCE[0]}) && cd .. && pwd )}

  mkdir -p $ctxDir/.heroku/bin
  mkdir -p $ctxDir/.heroku/with_jmap/bin
  cp $curDir/opt/with_jmap $ctxDir/.heroku/bin/with_jmap
  cp $curDir/opt/with_jmap_java $ctxDir/.heroku/with_jmap/bin/java
  chmod +x $ctxDir/.heroku/bin/with_jmap
  chmod +x $ctxDir/.heroku/with_jmap/bin/java

  mkdir -p $ctxDir/.heroku/with_jstack/bin
  cp $curDir/opt/with_jstack $ctxDir/.heroku/bin/with_jstack
  cp $curDir/opt/with_jstack_java $ctxDir/.heroku/with_jstack/bin/java
  chmod +x $ctxDir/.heroku/bin/with_jstack
  chmod +x $ctxDir/.heroku/with_jstack/bin/java

  cp $curDir/opt/java $ctxDir/.heroku/bin/java
  chmod +x $ctxDir/.heroku/bin/java
}

_create_export_script() {
  local javaHome=${1:-JAVA_HOME}
  local ctxDir=${2:-CWD}

  if [ -w ${ctxDir} ]; then
    cat << EOF > ${ctxDir}/export
export JAVA_HOME=$javaHome
export PATH=\$JAVA_HOME/bin:\$PATH
EOF
  fi
}
